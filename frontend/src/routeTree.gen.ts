/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as FavoritesRouteImport } from './routes/favorites'
import { Route as CartRouteImport } from './routes/cart'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PanelIndexRouteImport } from './routes/panel/index'
import { Route as HomeIndexRouteImport } from './routes/home/index'
import { Route as BizIndexRouteImport } from './routes/biz/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AccountIndexRouteImport } from './routes/account/index'
import { Route as VVendorIdRouteImport } from './routes/v/$vendorId'
import { Route as PaymentOrderIdRouteImport } from './routes/payment/$orderId'
import { Route as OOfferIdRouteImport } from './routes/o/$offerId'
import { Route as MeSettingsRouteImport } from './routes/me/settings'
import { Route as LegalTermsRouteImport } from './routes/legal/terms'
import { Route as LegalRefundPolicyRouteImport } from './routes/legal/refund-policy'
import { Route as LegalPrivacyRouteImport } from './routes/legal/privacy'
import { Route as LegalFaqRouteImport } from './routes/legal/faq'
import { Route as AuthLoginIndexRouteImport } from './routes/auth/login/index'
import { Route as PaymentOrderIdSuccessRouteImport } from './routes/payment/$orderId/success'
import { Route as PaymentOrderIdCancelRouteImport } from './routes/payment/$orderId/cancel'
import { Route as BizOffersCreateRouteImport } from './routes/biz/offers/create'
import { Route as AuthRegisterCustomerIndexRouteImport } from './routes/auth/register/customer/index'
import { Route as AuthRegisterBusinessIndexRouteImport } from './routes/auth/register/business/index'
import { Route as BizOffersOfferIdEditRouteImport } from './routes/biz/offers/$offerId/edit'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const FavoritesRoute = FavoritesRouteImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PanelIndexRoute = PanelIndexRouteImport.update({
  id: '/panel/',
  path: '/panel/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRouteImport,
} as any)
const BizIndexRoute = BizIndexRouteImport.update({
  id: '/biz/',
  path: '/biz/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountIndexRoute = AccountIndexRouteImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => rootRouteImport,
} as any)
const VVendorIdRoute = VVendorIdRouteImport.update({
  id: '/v/$vendorId',
  path: '/v/$vendorId',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentOrderIdRoute = PaymentOrderIdRouteImport.update({
  id: '/payment/$orderId',
  path: '/payment/$orderId',
  getParentRoute: () => rootRouteImport,
} as any)
const OOfferIdRoute = OOfferIdRouteImport.update({
  id: '/o/$offerId',
  path: '/o/$offerId',
  getParentRoute: () => rootRouteImport,
} as any)
const MeSettingsRoute = MeSettingsRouteImport.update({
  id: '/me/settings',
  path: '/me/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LegalTermsRoute = LegalTermsRouteImport.update({
  id: '/legal/terms',
  path: '/legal/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const LegalRefundPolicyRoute = LegalRefundPolicyRouteImport.update({
  id: '/legal/refund-policy',
  path: '/legal/refund-policy',
  getParentRoute: () => rootRouteImport,
} as any)
const LegalPrivacyRoute = LegalPrivacyRouteImport.update({
  id: '/legal/privacy',
  path: '/legal/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const LegalFaqRoute = LegalFaqRouteImport.update({
  id: '/legal/faq',
  path: '/legal/faq',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginIndexRoute = AuthLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthRoute,
} as any)
const PaymentOrderIdSuccessRoute = PaymentOrderIdSuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => PaymentOrderIdRoute,
} as any)
const PaymentOrderIdCancelRoute = PaymentOrderIdCancelRouteImport.update({
  id: '/cancel',
  path: '/cancel',
  getParentRoute: () => PaymentOrderIdRoute,
} as any)
const BizOffersCreateRoute = BizOffersCreateRouteImport.update({
  id: '/biz/offers/create',
  path: '/biz/offers/create',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterCustomerIndexRoute =
  AuthRegisterCustomerIndexRouteImport.update({
    id: '/register/customer/',
    path: '/register/customer/',
    getParentRoute: () => AuthRoute,
  } as any)
const AuthRegisterBusinessIndexRoute =
  AuthRegisterBusinessIndexRouteImport.update({
    id: '/register/business/',
    path: '/register/business/',
    getParentRoute: () => AuthRoute,
  } as any)
const BizOffersOfferIdEditRoute = BizOffersOfferIdEditRouteImport.update({
  id: '/biz/offers/$offerId/edit',
  path: '/biz/offers/$offerId/edit',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/cart': typeof CartRoute
  '/favorites': typeof FavoritesRoute
  '/profile': typeof ProfileRoute
  '/legal/faq': typeof LegalFaqRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/legal/refund-policy': typeof LegalRefundPolicyRoute
  '/legal/terms': typeof LegalTermsRoute
  '/me/settings': typeof MeSettingsRoute
  '/o/$offerId': typeof OOfferIdRoute
  '/payment/$orderId': typeof PaymentOrderIdRouteWithChildren
  '/v/$vendorId': typeof VVendorIdRoute
  '/account': typeof AccountIndexRoute
  '/admin': typeof AdminIndexRoute
  '/biz': typeof BizIndexRoute
  '/home': typeof HomeIndexRoute
  '/panel': typeof PanelIndexRoute
  '/biz/offers/create': typeof BizOffersCreateRoute
  '/payment/$orderId/cancel': typeof PaymentOrderIdCancelRoute
  '/payment/$orderId/success': typeof PaymentOrderIdSuccessRoute
  '/auth/login': typeof AuthLoginIndexRoute
  '/biz/offers/$offerId/edit': typeof BizOffersOfferIdEditRoute
  '/auth/register/business': typeof AuthRegisterBusinessIndexRoute
  '/auth/register/customer': typeof AuthRegisterCustomerIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/cart': typeof CartRoute
  '/favorites': typeof FavoritesRoute
  '/profile': typeof ProfileRoute
  '/legal/faq': typeof LegalFaqRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/legal/refund-policy': typeof LegalRefundPolicyRoute
  '/legal/terms': typeof LegalTermsRoute
  '/me/settings': typeof MeSettingsRoute
  '/o/$offerId': typeof OOfferIdRoute
  '/payment/$orderId': typeof PaymentOrderIdRouteWithChildren
  '/v/$vendorId': typeof VVendorIdRoute
  '/account': typeof AccountIndexRoute
  '/admin': typeof AdminIndexRoute
  '/biz': typeof BizIndexRoute
  '/home': typeof HomeIndexRoute
  '/panel': typeof PanelIndexRoute
  '/biz/offers/create': typeof BizOffersCreateRoute
  '/payment/$orderId/cancel': typeof PaymentOrderIdCancelRoute
  '/payment/$orderId/success': typeof PaymentOrderIdSuccessRoute
  '/auth/login': typeof AuthLoginIndexRoute
  '/biz/offers/$offerId/edit': typeof BizOffersOfferIdEditRoute
  '/auth/register/business': typeof AuthRegisterBusinessIndexRoute
  '/auth/register/customer': typeof AuthRegisterCustomerIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/cart': typeof CartRoute
  '/favorites': typeof FavoritesRoute
  '/profile': typeof ProfileRoute
  '/legal/faq': typeof LegalFaqRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/legal/refund-policy': typeof LegalRefundPolicyRoute
  '/legal/terms': typeof LegalTermsRoute
  '/me/settings': typeof MeSettingsRoute
  '/o/$offerId': typeof OOfferIdRoute
  '/payment/$orderId': typeof PaymentOrderIdRouteWithChildren
  '/v/$vendorId': typeof VVendorIdRoute
  '/account/': typeof AccountIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/biz/': typeof BizIndexRoute
  '/home/': typeof HomeIndexRoute
  '/panel/': typeof PanelIndexRoute
  '/biz/offers/create': typeof BizOffersCreateRoute
  '/payment/$orderId/cancel': typeof PaymentOrderIdCancelRoute
  '/payment/$orderId/success': typeof PaymentOrderIdSuccessRoute
  '/auth/login/': typeof AuthLoginIndexRoute
  '/biz/offers/$offerId/edit': typeof BizOffersOfferIdEditRoute
  '/auth/register/business/': typeof AuthRegisterBusinessIndexRoute
  '/auth/register/customer/': typeof AuthRegisterCustomerIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/cart'
    | '/favorites'
    | '/profile'
    | '/legal/faq'
    | '/legal/privacy'
    | '/legal/refund-policy'
    | '/legal/terms'
    | '/me/settings'
    | '/o/$offerId'
    | '/payment/$orderId'
    | '/v/$vendorId'
    | '/account'
    | '/admin'
    | '/biz'
    | '/home'
    | '/panel'
    | '/biz/offers/create'
    | '/payment/$orderId/cancel'
    | '/payment/$orderId/success'
    | '/auth/login'
    | '/biz/offers/$offerId/edit'
    | '/auth/register/business'
    | '/auth/register/customer'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/cart'
    | '/favorites'
    | '/profile'
    | '/legal/faq'
    | '/legal/privacy'
    | '/legal/refund-policy'
    | '/legal/terms'
    | '/me/settings'
    | '/o/$offerId'
    | '/payment/$orderId'
    | '/v/$vendorId'
    | '/account'
    | '/admin'
    | '/biz'
    | '/home'
    | '/panel'
    | '/biz/offers/create'
    | '/payment/$orderId/cancel'
    | '/payment/$orderId/success'
    | '/auth/login'
    | '/biz/offers/$offerId/edit'
    | '/auth/register/business'
    | '/auth/register/customer'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/cart'
    | '/favorites'
    | '/profile'
    | '/legal/faq'
    | '/legal/privacy'
    | '/legal/refund-policy'
    | '/legal/terms'
    | '/me/settings'
    | '/o/$offerId'
    | '/payment/$orderId'
    | '/v/$vendorId'
    | '/account/'
    | '/admin/'
    | '/biz/'
    | '/home/'
    | '/panel/'
    | '/biz/offers/create'
    | '/payment/$orderId/cancel'
    | '/payment/$orderId/success'
    | '/auth/login/'
    | '/biz/offers/$offerId/edit'
    | '/auth/register/business/'
    | '/auth/register/customer/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  CartRoute: typeof CartRoute
  FavoritesRoute: typeof FavoritesRoute
  ProfileRoute: typeof ProfileRoute
  LegalFaqRoute: typeof LegalFaqRoute
  LegalPrivacyRoute: typeof LegalPrivacyRoute
  LegalRefundPolicyRoute: typeof LegalRefundPolicyRoute
  LegalTermsRoute: typeof LegalTermsRoute
  MeSettingsRoute: typeof MeSettingsRoute
  OOfferIdRoute: typeof OOfferIdRoute
  PaymentOrderIdRoute: typeof PaymentOrderIdRouteWithChildren
  VVendorIdRoute: typeof VVendorIdRoute
  AccountIndexRoute: typeof AccountIndexRoute
  AdminIndexRoute: typeof AdminIndexRoute
  BizIndexRoute: typeof BizIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  PanelIndexRoute: typeof PanelIndexRoute
  BizOffersCreateRoute: typeof BizOffersCreateRoute
  BizOffersOfferIdEditRoute: typeof BizOffersOfferIdEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/favorites': {
      id: '/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof FavoritesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/panel/': {
      id: '/panel/'
      path: '/panel'
      fullPath: '/panel'
      preLoaderRoute: typeof PanelIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/biz/': {
      id: '/biz/'
      path: '/biz'
      fullPath: '/biz'
      preLoaderRoute: typeof BizIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account/': {
      id: '/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/v/$vendorId': {
      id: '/v/$vendorId'
      path: '/v/$vendorId'
      fullPath: '/v/$vendorId'
      preLoaderRoute: typeof VVendorIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment/$orderId': {
      id: '/payment/$orderId'
      path: '/payment/$orderId'
      fullPath: '/payment/$orderId'
      preLoaderRoute: typeof PaymentOrderIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/o/$offerId': {
      id: '/o/$offerId'
      path: '/o/$offerId'
      fullPath: '/o/$offerId'
      preLoaderRoute: typeof OOfferIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/me/settings': {
      id: '/me/settings'
      path: '/me/settings'
      fullPath: '/me/settings'
      preLoaderRoute: typeof MeSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legal/terms': {
      id: '/legal/terms'
      path: '/legal/terms'
      fullPath: '/legal/terms'
      preLoaderRoute: typeof LegalTermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legal/refund-policy': {
      id: '/legal/refund-policy'
      path: '/legal/refund-policy'
      fullPath: '/legal/refund-policy'
      preLoaderRoute: typeof LegalRefundPolicyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legal/privacy': {
      id: '/legal/privacy'
      path: '/legal/privacy'
      fullPath: '/legal/privacy'
      preLoaderRoute: typeof LegalPrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legal/faq': {
      id: '/legal/faq'
      path: '/legal/faq'
      fullPath: '/legal/faq'
      preLoaderRoute: typeof LegalFaqRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login/': {
      id: '/auth/login/'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/payment/$orderId/success': {
      id: '/payment/$orderId/success'
      path: '/success'
      fullPath: '/payment/$orderId/success'
      preLoaderRoute: typeof PaymentOrderIdSuccessRouteImport
      parentRoute: typeof PaymentOrderIdRoute
    }
    '/payment/$orderId/cancel': {
      id: '/payment/$orderId/cancel'
      path: '/cancel'
      fullPath: '/payment/$orderId/cancel'
      preLoaderRoute: typeof PaymentOrderIdCancelRouteImport
      parentRoute: typeof PaymentOrderIdRoute
    }
    '/biz/offers/create': {
      id: '/biz/offers/create'
      path: '/biz/offers/create'
      fullPath: '/biz/offers/create'
      preLoaderRoute: typeof BizOffersCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register/customer/': {
      id: '/auth/register/customer/'
      path: '/register/customer'
      fullPath: '/auth/register/customer'
      preLoaderRoute: typeof AuthRegisterCustomerIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/register/business/': {
      id: '/auth/register/business/'
      path: '/register/business'
      fullPath: '/auth/register/business'
      preLoaderRoute: typeof AuthRegisterBusinessIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/biz/offers/$offerId/edit': {
      id: '/biz/offers/$offerId/edit'
      path: '/biz/offers/$offerId/edit'
      fullPath: '/biz/offers/$offerId/edit'
      preLoaderRoute: typeof BizOffersOfferIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthRouteChildren {
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
  AuthRegisterBusinessIndexRoute: typeof AuthRegisterBusinessIndexRoute
  AuthRegisterCustomerIndexRoute: typeof AuthRegisterCustomerIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginIndexRoute: AuthLoginIndexRoute,
  AuthRegisterBusinessIndexRoute: AuthRegisterBusinessIndexRoute,
  AuthRegisterCustomerIndexRoute: AuthRegisterCustomerIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PaymentOrderIdRouteChildren {
  PaymentOrderIdCancelRoute: typeof PaymentOrderIdCancelRoute
  PaymentOrderIdSuccessRoute: typeof PaymentOrderIdSuccessRoute
}

const PaymentOrderIdRouteChildren: PaymentOrderIdRouteChildren = {
  PaymentOrderIdCancelRoute: PaymentOrderIdCancelRoute,
  PaymentOrderIdSuccessRoute: PaymentOrderIdSuccessRoute,
}

const PaymentOrderIdRouteWithChildren = PaymentOrderIdRoute._addFileChildren(
  PaymentOrderIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  CartRoute: CartRoute,
  FavoritesRoute: FavoritesRoute,
  ProfileRoute: ProfileRoute,
  LegalFaqRoute: LegalFaqRoute,
  LegalPrivacyRoute: LegalPrivacyRoute,
  LegalRefundPolicyRoute: LegalRefundPolicyRoute,
  LegalTermsRoute: LegalTermsRoute,
  MeSettingsRoute: MeSettingsRoute,
  OOfferIdRoute: OOfferIdRoute,
  PaymentOrderIdRoute: PaymentOrderIdRouteWithChildren,
  VVendorIdRoute: VVendorIdRoute,
  AccountIndexRoute: AccountIndexRoute,
  AdminIndexRoute: AdminIndexRoute,
  BizIndexRoute: BizIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  PanelIndexRoute: PanelIndexRoute,
  BizOffersCreateRoute: BizOffersCreateRoute,
  BizOffersOfferIdEditRoute: BizOffersOfferIdEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
