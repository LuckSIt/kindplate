require('dotenv').config();
const { Pool } = require('pg');
const logger = require('../lib/logger');

// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å —è–≤–Ω—ã–º–∏ credentials –¥–ª—è –∫—Ä–æ–Ω-–¥–∂–æ–±–∞
const pool = new Pool({
    user: process.env.DB_USER || 'postgres',
    host: process.env.DB_HOST || 'localhost',
    database: process.env.DB_NAME || 'kindplate',
    password: process.env.DB_PASSWORD || '12345678',
    port: process.env.DB_PORT || 5432,
});

/**
 * –ö—Ä–æ–Ω-–¥–∂–æ–± –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ –¥–µ–Ω—å)
 * 
 * –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞:
 * - –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∑–∞–∫–∞–∑–æ–≤ (completed/total) - 30%
 * - –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ - 25%
 * - –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ - 25%
 * - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å) - 20%
 */

const QUALITY_WEIGHTS = {
    COMPLETION_RATE: 0.30,    // –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    AVG_RATING: 0.25,          // –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ (1-5)
    REPEAT_RATE: 0.25,         // –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    ACTIVITY: 0.20             // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤)
};

const THRESHOLDS = {
    MIN_ORDERS: 10,            // –ú–∏–Ω–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–π–¥–∂–∞
    MIN_QUALITY_SCORE: 75,     // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–ª—è "–õ—É—á—à–∏–µ —É –Ω–∞—Å"
    MIN_COMPLETION_RATE: 0.90, // –ú–∏–Ω–∏–º—É–º 90% –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    MIN_AVG_RATING: 4.5        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ 4.5
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
 */
function calculateQualityScore(metrics) {
    const {
        total_orders,
        completed_orders,
        repeat_customers,
        avg_rating,
        unique_customers
    } = metrics;

    // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–∫–∞–∑–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    if (total_orders < QUALITY_WEIGHTS.MIN_ORDERS) {
        return 0;
    }

    // 1. –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (0-100)
    const completionRate = total_orders > 0 
        ? (completed_orders / total_orders) * 100 
        : 0;

    // 2. –û—Ü–µ–Ω–∫–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º 1-5 –∫ 0-100)
    const ratingScore = (avg_rating / 5) * 100;

    // 3. –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (0-100)
    const repeatRate = unique_customers > 0 
        ? (repeat_customers / unique_customers) * 100 
        : 0;

    // 4. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞, –º–∞–∫—Å 100)
    const activityScore = Math.min(100, Math.log10(total_orders + 1) * 50);

    // –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª (–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞)
    const qualityScore = 
        completionRate * QUALITY_WEIGHTS.COMPLETION_RATE +
        ratingScore * QUALITY_WEIGHTS.AVG_RATING +
        repeatRate * QUALITY_WEIGHTS.REPEAT_RATE +
        activityScore * QUALITY_WEIGHTS.ACTIVITY;

    return Math.round(qualityScore * 100) / 100; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –±–µ–π–¥–∂ "–õ—É—á—à–∏–µ —É –Ω–∞—Å"
 */
function isTopVendor(metrics, qualityScore) {
    const {
        total_orders,
        completed_orders,
        avg_rating
    } = metrics;

    const completionRate = total_orders > 0 
        ? completed_orders / total_orders 
        : 0;

    return (
        total_orders >= THRESHOLDS.MIN_ORDERS &&
        qualityScore >= THRESHOLDS.MIN_QUALITY_SCORE &&
        completionRate >= THRESHOLDS.MIN_COMPLETION_RATE &&
        avg_rating >= THRESHOLDS.MIN_AVG_RATING
    );
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
 */
async function calculateQualityScores() {
    const startTime = Date.now();
    logger.info('üîÑ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤...');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const businessesResult = await pool.query(`
            SELECT id, name, email
            FROM users
            WHERE is_business = TRUE
        `);

        const businesses = businessesResult.rows;
        logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${businesses.length}`);

        let updatedCount = 0;
        let topVendorsCount = 0;

        for (const business of businesses) {
            try {
                // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
                const metrics = await collectVendorMetrics(business.id);
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞
                const qualityScore = calculateQualityScore(metrics);
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ç–æ–ø–æ–≤—ã–π –ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü
                const isTop = isTopVendor(metrics, qualityScore);

                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                await pool.query(`
                    UPDATE users
                    SET 
                        is_top = $1,
                        quality_score = $2,
                        total_orders = $3,
                        completed_orders = $4,
                        repeat_customers = $5,
                        avg_rating = $6
                    WHERE id = $7
                `, [
                    isTop,
                    qualityScore,
                    metrics.total_orders,
                    metrics.completed_orders,
                    metrics.repeat_customers,
                    metrics.avg_rating,
                    business.id
                ]);

                updatedCount++;
                if (isTop) {
                    topVendorsCount++;
                    logger.info(`‚≠ê ${business.name} –ø–æ–ª—É—á–∏–ª –±–µ–π–¥–∂ "–õ—É—á—à–∏–µ —É –Ω–∞—Å" (–±–∞–ª–ª: ${qualityScore})`);
                }

            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è ${business.name}:`, error);
            }
        }

        const duration = Date.now() - startTime;
        logger.info(`‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}ms`);
        logger.info(`üìà –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: ${updatedCount}`);
        logger.info(`‚≠ê –¢–æ–ø–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: ${topVendorsCount}`);

        return {
            success: true,
            updated: updatedCount,
            topVendors: topVendorsCount,
            duration
        };

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:', error);
        throw error;
    }
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
 */
async function collectVendorMetrics(businessId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã orders
    const tableCheck = await pool.query(`
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'orders'
        );
    `);

    if (!tableCheck.rows[0].exists) {
        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        return {
            total_orders: 0,
            completed_orders: 0,
            repeat_customers: 0,
            avg_rating: 0,
            unique_customers: 0
        };
    }

    try {
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
        const ordersResult = await pool.query(`
            SELECT 
                COUNT(*) as total_orders,
                COUNT(*) FILTER (WHERE status = 'completed') as completed_orders
            FROM orders
            WHERE business_id = $1
        `, [businessId]);

        // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏
        const customersResult = await pool.query(`
            SELECT 
                COUNT(DISTINCT user_id) as unique_customers,
                COUNT(*) FILTER (WHERE order_count > 1) as repeat_customers
            FROM (
                SELECT user_id, COUNT(*) as order_count
                FROM orders
                WHERE business_id = $1
                GROUP BY user_id
            ) customer_orders
        `, [businessId]);

        // –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ reviews)
        let avgRating = 0;
        try {
            const reviewsCheck = await pool.query(`
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'reviews'
                );
            `);

            if (reviewsCheck.rows[0].exists) {
                const ratingResult = await pool.query(`
                    SELECT COALESCE(AVG(rating), 0) as avg_rating
                    FROM reviews
                    WHERE business_id = $1
                `, [businessId]);
                avgRating = parseFloat(ratingResult.rows[0].avg_rating) || 0;
            }
        } catch (reviewError) {
            logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ${businessId}`);
        }

        return {
            total_orders: parseInt(ordersResult.rows[0].total_orders) || 0,
            completed_orders: parseInt(ordersResult.rows[0].completed_orders) || 0,
            repeat_customers: parseInt(customersResult.rows[0].repeat_customers) || 0,
            avg_rating: Math.round(avgRating * 100) / 100,
            unique_customers: parseInt(customersResult.rows[0].unique_customers) || 0
        };
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ${businessId}:`, error);
        return {
            total_orders: 0,
            completed_orders: 0,
            repeat_customers: 0,
            avg_rating: 0,
            unique_customers: 0
        };
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫—Ä–æ–Ω-–¥–∂–æ–±–µ –∏–ª–∏ API
 */
module.exports = {
    calculateQualityScores,
    collectVendorMetrics,
    calculateQualityScore,
    isTopVendor,
    THRESHOLDS
};

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    calculateQualityScores()
        .then((result) => {
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

