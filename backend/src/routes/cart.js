const express = require('express');
const pool = require('../lib/db');

const cartRouter = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
cartRouter.get("/cart", async (req, res) => {
    try {
        // TODO: –ü–æ–ª—É—á–∏—Ç—å user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
        const userId = 1; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        console.log("üîç –ó–∞–ø—Ä–æ—Å /customer/cart", { userId });

        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü
        const tablesCheck = await pool.query(`
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = ANY($1)
        `, [[ 'cart_items', 'offers', 'businesses' ]]);
        const have = tablesCheck.rows.map(r => r.table_name);
        if (!have.includes('cart_items') || !have.includes('offers') || !have.includes('businesses')) {
            console.warn('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É.');
            return res.send({ success: true, data: [] });
        }

        const result = await pool.query(
            `SELECT 
                ci.offer_id,
                ci.quantity,
                o.business_id,
                o.title,
                o.description,
                o.image_url,
                o.original_price,
                o.discounted_price,
                o.pickup_time_start,
                o.pickup_time_end,
                b.name as business_name,
                b.address as business_address
            FROM cart_items ci
            JOIN offers o ON ci.offer_id = o.id
            JOIN businesses b ON o.business_id = b.id
            WHERE ci.user_id = $1`,
            [userId]
        );

        const cartItems = result.rows.map(row => ({
            offer_id: row.offer_id,
            quantity: row.quantity,
            business_id: row.business_id,
            offer: {
                id: row.offer_id,
                title: row.title,
                description: row.description,
                image_url: row.image_url,
                original_price: parseFloat(row.original_price),
                discounted_price: parseFloat(row.discounted_price),
                pickup_time_start: row.pickup_time_start,
                pickup_time_end: row.pickup_time_end,
                business: {
                    id: row.business_id,
                    name: row.business_name,
                    address: row.business_address
                }
            }
        }));

        res.send({
            success: true,
            data: cartItems
        });
    } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /customer/cart:", e);
        return res.send({ success: true, data: [] });
    }
});

// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
cartRouter.post("/cart", async (req, res) => {
    try {
        const { offer_id, quantity } = req.body;
        // TODO: –ü–æ–ª—É—á–∏—Ç—å user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
        const userId = 1; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        console.log("üîç –ó–∞–ø—Ä–æ—Å POST /customer/cart", { offer_id, quantity, userId });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        const offerResult = await pool.query(
            `SELECT o.id, o.business_id, o.quantity_available, o.is_active
             FROM offers o
             WHERE o.id = $1 AND o.is_active = true`,
            [offer_id]
        );

        if (offerResult.rows.length === 0) {
            return res.status(404).send({
                success: false,
                error: "OFFER_NOT_FOUND",
                message: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ"
            });
        }

        const offer = offerResult.rows[0];
        if (offer.quantity_available < quantity) {
            return res.status(400).send({
                success: false,
                error: "INSUFFICIENT_QUANTITY",
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
        const existingCartResult = await pool.query(
            `SELECT ci.offer_id, o.business_id
             FROM cart_items ci
             JOIN offers o ON ci.offer_id = o.id
             WHERE ci.user_id = $1`,
            [userId]
        );

        const hasDifferentBusiness = existingCartResult.rows.some(
            item => item.business_id !== offer.business_id
        );

        if (hasDifferentBusiness) {
            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            await pool.query('DELETE FROM cart_items WHERE user_id = $1', [userId]);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        await pool.query(
            `INSERT INTO cart_items (user_id, offer_id, quantity)
             VALUES ($1, $2, $3)
             ON CONFLICT (user_id, offer_id)
             DO UPDATE SET quantity = $3`,
            [userId, offer_id, quantity]
        );

        res.send({
            success: true,
            message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"
        });
    } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ POST /customer/cart:", e);
        res.status(500).send({
            success: false,
            error: "UNKNOWN_ERROR",
            message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
cartRouter.put("/cart", async (req, res) => {
    try {
        const { offer_id, quantity } = req.body;
        // TODO: –ü–æ–ª—É—á–∏—Ç—å user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
        const userId = 1; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        console.log("üîç –ó–∞–ø—Ä–æ—Å PUT /customer/cart", { offer_id, quantity, userId });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        const existingItem = await pool.query(
            `SELECT ci.quantity, o.quantity_available
             FROM cart_items ci
             JOIN offers o ON ci.offer_id = o.id
             WHERE ci.user_id = $1 AND ci.offer_id = $2`,
            [userId, offer_id]
        );

        if (existingItem.rows.length === 0) {
            return res.status(404).send({
                success: false,
                error: "ITEM_NOT_IN_CART",
                message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ"
            });
        }

        const availableQuantity = existingItem.rows[0].quantity_available;
        if (availableQuantity < quantity) {
            return res.status(400).send({
                success: false,
                error: "INSUFFICIENT_QUANTITY",
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏"
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await pool.query(
            `UPDATE cart_items 
             SET quantity = $1 
             WHERE user_id = $2 AND offer_id = $3`,
            [quantity, userId, offer_id]
        );

        res.send({
            success: true,
            message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
        });
    } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ PUT /customer/cart:", e);
        res.status(500).send({
            success: false,
            error: "UNKNOWN_ERROR",
            message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
cartRouter.delete("/cart/:offerId", async (req, res) => {
    try {
        const { offerId } = req.params;
        // TODO: –ü–æ–ª—É—á–∏—Ç—å user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
        const userId = 1; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        console.log("üîç –ó–∞–ø—Ä–æ—Å DELETE /customer/cart/:offerId", { offerId, userId });

        const result = await pool.query(
            `DELETE FROM cart_items 
             WHERE user_id = $1 AND offer_id = $2`,
            [userId, offerId]
        );

        if (result.rowCount === 0) {
            return res.status(404).send({
                success: false,
                error: "ITEM_NOT_IN_CART",
                message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ"
            });
        }

        res.send({
            success: true,
            message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
        });
    } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ DELETE /customer/cart/:offerId:", e);
        res.status(500).send({
            success: false,
            error: "UNKNOWN_ERROR",
            message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
});

// –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
cartRouter.delete("/cart", async (req, res) => {
    try {
        // TODO: –ü–æ–ª—É—á–∏—Ç—å user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
        const userId = 1; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        console.log("üîç –ó–∞–ø—Ä–æ—Å DELETE /customer/cart", { userId });

        await pool.query('DELETE FROM cart_items WHERE user_id = $1', [userId]);

        res.send({
            success: true,
            message: "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞"
        });
    } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ DELETE /customer/cart:", e);
        res.status(500).send({
            success: false,
            error: "UNKNOWN_ERROR",
            message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
});

module.exports = cartRouter;
