require('dotenv').config();
const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
const bcrypt = require('bcrypt');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –µ—ë –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
const adminPool = new Pool({
    user: process.env.DB_USER || 'postgres',
    host: process.env.DB_HOST || 'localhost',
    database: 'postgres', // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    password: process.env.DB_PASSWORD || '12345678',
    port: process.env.DB_PORT || 5432,
});

async function recreateDatabase() {
    let client;
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL...\n');

        // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        client = await adminPool.connect();

        // –£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        console.log('üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        await client.query('DROP DATABASE IF EXISTS kindplate');
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞');

        // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω–æ–≤–æ
        console.log('üìÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        await client.query('CREATE DATABASE kindplate');
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');

        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.release();

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        const pool = new Pool({
            user: process.env.DB_USER || 'postgres',
            host: process.env.DB_HOST || 'localhost',
            database: 'kindplate',
            password: process.env.DB_PASSWORD || 'password',
            port: process.env.DB_PORT || 5432,
        });

        client = await pool.connect();

        // –í—ã–ø–æ–ª–Ω—è–µ–º init.sql
        console.log('üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
        const initSql = fs.readFileSync(path.join(__dirname, 'init.sql'), 'utf8');
        await client.query(initSql);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('\nüë• –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const passwordHash = await bcrypt.hash('123456', 10);

        // –°–æ–∑–¥–∞–µ–º –±–∏–∑–Ω–µ—Å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const businessResult = await client.query(
            `INSERT INTO users (name, email, address, coord_0, coord_1, password_hash, is_business) 
             VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id`,
            ['–ö–∞—Ñ–µ –í–∫—É—Å–Ω—è—à–∫–∞', 'cafe@test.com', '–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 100', 59.9311, 30.3609, passwordHash, true]
        );
        
        const businessId = businessResult.rows[0].id;
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±–∏–∑–Ω–µ—Å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ö–∞—Ñ–µ –í–∫—É—Å–Ω—è—à–∫–∞" —Å ID: ${businessId}`);

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã (—Å—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
        const items = [
            ['–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π. –°–≤–µ–∂–∞—è –∏ –≤–∫—É—Å–Ω–∞—è!', 5, 500, 200],
            ['–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å', '–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π, —Å—ã—Ä–æ–º –ø–∞—Ä–º–µ–∑–∞–Ω –∏ —Å–æ—É—Å–æ–º –¶–µ–∑–∞—Ä—å', 3, 350, 150],
            ['–ë—É—Ä–≥–µ—Ä —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º', '–°–æ—á–Ω—ã–π –±—É—Ä–≥–µ—Ä —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º —Ñ—Ä–∏', 4, 450, 180]
        ];

        for (const [name, description, amount, price_orig, price_disc] of items) {
            await client.query(
                `INSERT INTO items (name, description, amount, owner_id, price_orig, price_disc) 
                 VALUES ($1, $2, $3, $4, $5, $6)`,
                [name, description, amount, businessId, price_orig, price_disc]
            );
        }

        console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (items)');

        // –°–æ–∑–¥–∞–µ–º offers (–Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
        const offers = [
            ['–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π. –°–≤–µ–∂–∞—è –∏ –≤–∫—É—Å–Ω–∞—è! –ó–∞–±–∏—Ä–∞–π—Ç–µ –≤–µ—á–µ—Ä–æ–º —Å–æ —Å–∫–∏–¥–∫–æ–π.', null, 500, 200, 5, '18:00', '20:00'],
            ['–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å', '–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π, —Å—ã—Ä–æ–º –ø–∞—Ä–º–µ–∑–∞–Ω –∏ —Å–æ—É—Å–æ–º –¶–µ–∑–∞—Ä—å. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –æ–±–µ–¥–∞!', null, 350, 150, 3, '19:00', '21:00'],
            ['–ë—É—Ä–≥–µ—Ä —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º', '–°–æ—á–Ω—ã–π –±—É—Ä–≥–µ—Ä —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º —Ñ—Ä–∏. –ì–æ—Ä—è—á–∏–π –∏ –≤–∫—É—Å–Ω—ã–π!', null, 450, 180, 4, '18:30', '20:30']
        ];

        for (const [title, description, image_url, original_price, discounted_price, quantity, start_time, end_time] of offers) {
            await client.query(
                `INSERT INTO offers (business_id, title, description, image_url, original_price, discounted_price, quantity_available, pickup_time_start, pickup_time_end, is_active) 
                 VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`,
                [businessId, title, description, image_url, original_price, discounted_price, quantity, start_time, end_time, true]
            );
        }

        console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (offers)');

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        const customerResult = await client.query(
            `INSERT INTO users (name, email, address, coord_0, coord_1, password_hash, is_business) 
             VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id`,
            ['–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç', 'customer@test.com', '–°–∞–¥–æ–≤–∞—è —É–ª–∏—Ü–∞, 50', 59.9267, 30.3175, passwordHash, false]
        );

        const customerId = customerResult.rows[0].id;
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        
        const usersResult = await client.query('SELECT * FROM users');
        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (${usersResult.rows.length}):`);
        usersResult.rows.forEach(user => {
            console.log(`  - ${user.name} (${user.email}) - ${user.is_business ? '–ë–∏–∑–Ω–µ—Å' : '–ö–ª–∏–µ–Ω—Ç'}`);
        });

        const itemsResult = await client.query('SELECT * FROM items');
        console.log(`\nüì¶ –¢–æ–≤–∞—Ä—ã - items (${itemsResult.rows.length}):`);
        itemsResult.rows.forEach(item => {
            console.log(`  - ${item.name} (${item.amount} —à—Ç.) - ${item.price_disc}‚ÇΩ (${item.price_orig}‚ÇΩ)`);
        });

        const offersResult = await client.query('SELECT * FROM offers');
        console.log(`\nüéÅ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - offers (${offersResult.rows.length}):`);
        offersResult.rows.forEach(offer => {
            console.log(`  - ${offer.title} (${offer.quantity_available} —à—Ç.) - ${offer.discounted_price}‚ÇΩ (${offer.original_price}‚ÇΩ)`);
        });

        console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!');
        console.log('\nüìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
        console.log('  –ë–∏–∑–Ω–µ—Å: cafe@test.com / 123456');
        console.log('  –ö–ª–∏–µ–Ω—Ç: customer@test.com / 123456');
        console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å backend —Å–µ—Ä–≤–µ—Ä –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ API!');
        console.log('üí° –í backend/src/index.js –∑–∞–º–µ–Ω–∏—Ç–µ:');
        console.log('   const customerRouter = require("./routes/customer-simple");');
        console.log('   –Ω–∞:');
        console.log('   const customerRouter = require("./routes/customer");');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
        
        if (error.code === '28P01') {
            console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
            console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å PostgreSQL –≤ —Ñ–∞–π–ª–µ .env');
            console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω');
            console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
        
        if (error.code === 'ECONNREFUSED') {
            console.log('\nüí° PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
        }
    } finally {
        if (client) {
            await client.release();
        }
        await adminPool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
recreateDatabase();